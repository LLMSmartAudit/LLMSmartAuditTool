pragma solidity 0.8.7;import "@openzeppelin/contracts/token/ERC20/IERC20.sol";import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";import "./interfaces/IOwnership.sol";import "./interfaces/IVault.sol";import "./interfaces/IController.sol";import "./interfaces/IRegistry.sol";contract Vault is IVault {using SafeERC20 for IERC20;address public override token;IController public controller;IRegistry public registry;IOwnership public ownership;mapping(address => uint256) public override debts;mapping(address => uint256) public attributions;uint256 public totalAttributions;address public keeper; //keeper can operate utilize(), if address zero, anyone can operate.uint256 public balance; //balance of underlying tokenuint256 public totalDebt; //total debt balance. 1debt:1tokenuint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncationevent ControllerSet(address controller);modifier onlyOwner() {require(ownership.owner() == msg.sender,"Restricted: caller is not allowed to operate");_;}modifier onlyMarket() {require(IRegistry(registry).isListed(msg.sender),"ERROR_ONLY_MARKET");_;}constructor(address _token,address _registry,address _controller,address _ownership) {require(_token != address(0));require(_registry != address(0));require(_ownership != address(0));token = _token;registry = IRegistry(_registry);controller = IController(_controller);ownership = IOwnership(_ownership);}function addValueBatch(uint256 _amount,address _from,address[2] memory _beneficiaries,uint256[2] memory _shares) external override onlyMarket returns (uint256[2] memory _allocations) {require(_shares[0] + _shares[1] == 1000000, "ERROR_INCORRECT_SHARE");uint256 _attributions;if (totalAttributions == 0) {_attributions = _amount;} else {uint256 _pool = valueAll();_attributions = (_amount * totalAttributions) / _pool;}IERC20(token).safeTransferFrom(_from, address(this), _amount);balance += _amount;totalAttributions += _attributions;for (uint128 i = 0; i < 2; i++) {uint256 _allocation = (_shares[i] * _attributions) / MAGIC_SCALE_1E6;attributions[_beneficiaries[i]] += _allocation;_allocations[i] = _allocation;}}function addValue(uint256 _amount,address _from,address _beneficiary) external override onlyMarket returns (uint256 _attributions) {if (totalAttributions == 0) {_attributions = _amount;} else {uint256 _pool = valueAll();_attributions = (_amount * totalAttributions) / _pool;}IERC20(token).safeTransferFrom(_from, address(this), _amount);balance += _amount;totalAttributions += _attributions;attributions[_beneficiary] += _attributions;}function withdrawValue(uint256 _amount, address _to)externaloverridereturns (uint256 _attributions){require(attributions[msg.sender] > 0 &&underlyingValue(msg.sender) >= _amount,"ERROR_WITHDRAW-VALUE_BADCONDITOONS");_attributions = (totalAttributions * _amount) / valueAll();attributions[msg.sender] -= _attributions;totalAttributions -= _attributions;if (available() < _amount) {uint256 _shortage = _amount - available();_unutilize(_shortage);assert(available() >= _amount);}balance -= _amount;IERC20(token).safeTransfer(_to, _amount);}function transferValue(uint256 _amount, address _destination)externaloverridereturns (uint256 _attributions){require(attributions[msg.sender] > 0 &&underlyingValue(msg.sender) >= _amount,"ERROR_TRANSFER-VALUE_BADCONDITOONS");_attributions = (_amount * totalAttributions) / valueAll();attributions[msg.sender] -= _attributions;attributions[_destination] += _attributions;}function borrowValue(uint256 _amount, address _to) external onlyMarket override {debts[msg.sender] += _amount;totalDebt += _amount;IERC20(token).safeTransfer(_to, _amount);}function offsetDebt(uint256 _amount, address _target)externaloverridereturns (uint256 _attributions){require(attributions[msg.sender] > 0 &&underlyingValue(msg.sender) >= _amount,"ERROR_REPAY_DEBT_BADCONDITOONS");_attributions = (_amount * totalAttributions) / valueAll();attributions[msg.sender] -= _attributions;totalAttributions -= _attributions;balance -= _amount;debts[_target] -= _amount;totalDebt -= _amount;}function transferDebt(uint256 _amount) external onlyMarket override {if(_amount != 0){debts[msg.sender] -= _amount;debts[address(0)] += _amount;}}function repayDebt(uint256 _amount, address _target) external override {uint256 _debt = debts[_target];if (_debt >= _amount) {debts[_target] -= _amount;totalDebt -= _amount;IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);} else {debts[_target] = 0;totalDebt -= _debt;IERC20(token).safeTransferFrom(msg.sender, address(this), _debt);}}function withdrawAttribution(uint256 _attribution, address _to)externaloverridereturns (uint256 _retVal){_retVal = _withdrawAttribution(_attribution, _to);}function withdrawAllAttribution(address _to)externaloverridereturns (uint256 _retVal){_retVal = _withdrawAttribution(attributions[msg.sender], _to);}function _withdrawAttribution(uint256 _attribution, address _to)internalreturns (uint256 _retVal){require(attributions[msg.sender] >= _attribution,"ERROR_WITHDRAW-ATTRIBUTION_BADCONDITOONS");_retVal = (_attribution * valueAll()) / totalAttributions;attributions[msg.sender] -= _attribution;totalAttributions -= _attribution;if (available() < _retVal) {uint256 _shortage = _retVal - available();_unutilize(_shortage);}balance -= _retVal;IERC20(token).safeTransfer(_to, _retVal);}function transferAttribution(uint256 _amount, address _destination)externaloverride{require(_destination != address(0), "ERROR_ZERO_ADDRESS");require(_amount != 0 && attributions[msg.sender] >= _amount,"ERROR_TRANSFER-ATTRIBUTION_BADCONDITOONS");attributions[msg.sender] -= _amount;attributions[_destination] += _amount;}function utilize() external override returns (uint256 _amount) {if (keeper != address(0)) {require(msg.sender == keeper, "ERROR_NOT_KEEPER");}_amount = available(); //balanceif (_amount > 0) {IERC20(token).safeTransfer(address(controller), _amount);balance -= _amount;controller.earn(address(token), _amount);}}function attributionOf(address _target)externalviewoverridereturns (uint256){return attributions[_target];}function attributionAll() external view returns (uint256) {return totalAttributions;}function attributionValue(uint256 _attribution)externalviewoverridereturns (uint256){if (totalAttributions > 0 && _attribution > 0) {return (_attribution * valueAll()) / totalAttributions;} else {return 0;}}function underlyingValue(address _target)publicviewoverridereturns (uint256){if (attributions[_target] > 0) {return (valueAll() * attributions[_target]) / totalAttributions;} else {return 0;}}function valueAll() public view returns (uint256) {if (address(controller) != address(0)) {return balance + controller.valueAll();} else {return balance;}}function _unutilize(uint256 _amount) internal {require(address(controller) != address(0), "ERROR_CONTROLLER_NOT_SET");controller.withdraw(address(this), _amount);balance += _amount;}function available() public view returns (uint256) {return balance - totalDebt;}function getPricePerFullShare() public view returns (uint256) {return (valueAll() * MAGIC_SCALE_1E6) / totalAttributions;}function withdrawRedundant(address _token, address _to)externaloverrideonlyOwner{if (_token == address(token) &&balance < IERC20(token).balanceOf(address(this))) {uint256 _redundant = IERC20(token).balanceOf(address(this)) -balance;IERC20(token).safeTransfer(_to, _redundant);} else if (IERC20(_token).balanceOf(address(this)) > 0) {IERC20(_token).safeTransfer(_to,IERC20(_token).balanceOf(address(this)));}}function setController(address _controller) public override onlyOwner {require(_controller != address(0), "ERROR_ZERO_ADDRESS");if (address(controller) != address(0)) {controller.migrate(address(_controller));controller = IController(_controller);} else {controller = IController(_controller);}emit ControllerSet(_controller);}function setKeeper(address _keeper) external override onlyOwner {if (keeper != _keeper) {keeper = _keeper;}}}