pragma solidity ^0.8.0;import "../Interfaces/IOracle.sol";import "../Interfaces/IChainlinkOracle.sol";import "../lib/LibMath.sol";import "@openzeppelin/contracts/access/Ownable.sol";import "prb-math/contracts/PRBMathUD60x18.sol";contract GasOracle is IOracle, Ownable {using LibMath for uint256;IChainlinkOracle public gasOracle;IChainlinkOracle public priceOracle;uint8 public override decimals = 18;uint256 private constant MAX_DECIMALS = 18;constructor(address _priceOracle, address _gasOracle) {gasOracle = IChainlinkOracle(_gasOracle); /* Gas cost oracle */priceOracle = IChainlinkOracle(_priceOracle); /* Quote/ETH oracle */}function latestAnswer() external view override returns (uint256) {uint256 gasPrice = uint256(gasOracle.latestAnswer());uint256 ethPrice = uint256(priceOracle.latestAnswer());uint256 result = PRBMathUD60x18.mul(gasPrice, ethPrice);return result;}function toWad(uint256 raw, IChainlinkOracle _oracle) internal view returns (uint256) {IChainlinkOracle oracle = IChainlinkOracle(_oracle);uint8 _decimals = oracle.decimals(); // 9require(_decimals <= MAX_DECIMALS, "GAS: too many decimals");uint256 scaler = uint256(10**(MAX_DECIMALS - _decimals));return raw * scaler;}function setGasOracle(address _gasOracle) public onlyOwner {require(_gasOracle != address(0), "address(0) given");gasOracle = IChainlinkOracle(_gasOracle);}function setPriceOracle(address _priceOracle) public onlyOwner {require(_priceOracle != address(0), "address(0) given");priceOracle = IChainlinkOracle(_priceOracle);}function setDecimals(uint8 _decimals) external {decimals = _decimals;}}