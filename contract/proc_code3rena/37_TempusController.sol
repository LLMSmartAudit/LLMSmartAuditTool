pragma solidity 0.8.6;import "@openzeppelin/contracts/token/ERC20/IERC20.sol";import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";import "@openzeppelin/contracts/security/ReentrancyGuard.sol";import "./amm/interfaces/ITempusAMM.sol";import "./amm/interfaces/IVault.sol";import "./ITempusPool.sol";import "./math/Fixed256xVar.sol";import "./utils/PermanentlyOwnable.sol";import "./utils/AMMBalancesHelper.sol";import "./utils/UntrustedERC20.sol";contract TempusController is PermanentlyOwnable, ReentrancyGuard {using Fixed256xVar for uint256;using SafeERC20 for IERC20;using UntrustedERC20 for IERC20;using AMMBalancesHelper for uint256[];event Deposited(address indexed pool,address indexed depositor,address indexed recipient,uint256 yieldTokenAmount,uint256 backingTokenValue,uint256 shareAmounts,uint256 interestRate,uint256 fee);event Redeemed(address indexed pool,address indexed redeemer,address indexed recipient,uint256 principalShareAmount,uint256 yieldShareAmount,uint256 yieldTokenAmount,uint256 backingTokenValue,uint256 interestRate,uint256 fee,bool isEarlyRedeem);function depositAndProvideLiquidity(ITempusAMM tempusAMM,uint256 tokenAmount,bool isBackingToken) external payable nonReentrant {_depositAndProvideLiquidity(tempusAMM, tokenAmount, isBackingToken);}function provideLiquidity(ITempusAMM tempusAMM, uint256 sharesAmount) external nonReentrant {(IVault vault,bytes32 poolId,IERC20[] memory ammTokens,uint256[] memory ammBalances) = _getAMMDetailsAndEnsureInitialized(tempusAMM);_provideLiquidity(msg.sender, vault, poolId, ammTokens, ammBalances, sharesAmount, msg.sender);}function depositAndFix(ITempusAMM tempusAMM,uint256 tokenAmount,bool isBackingToken,uint256 minTYSRate) external payable nonReentrant {_depositAndFix(tempusAMM, tokenAmount, isBackingToken, minTYSRate);}function depositYieldBearing(ITempusPool targetPool,uint256 yieldTokenAmount,address recipient) public nonReentrant {_depositYieldBearing(targetPool, yieldTokenAmount, recipient);}function depositBacking(ITempusPool targetPool,uint256 backingTokenAmount,address recipient) public payable nonReentrant {_depositBacking(targetPool, backingTokenAmount, recipient);}function redeemToYieldBearing(ITempusPool targetPool,uint256 principalAmount,uint256 yieldAmount,address recipient) public nonReentrant {_redeemToYieldBearing(targetPool, msg.sender, principalAmount, yieldAmount, recipient);}function redeemToBacking(ITempusPool targetPool,uint256 principalAmount,uint256 yieldAmount,address recipient) public nonReentrant {_redeemToBacking(targetPool, msg.sender, principalAmount, yieldAmount, recipient);}function exitTempusAMM(ITempusAMM tempusAMM,uint256 lpTokensAmount,uint256 principalAmountOutMin,uint256 yieldAmountOutMin,bool toInternalBalances) external nonReentrant {_exitTempusAMM(tempusAMM, lpTokensAmount, principalAmountOutMin, yieldAmountOutMin, toInternalBalances);}function exitTempusAMMAndRedeem(ITempusAMM tempusAMM,uint256 principals,uint256 yields,uint256 principalsStaked,uint256 yieldsStaked,uint256 maxLpTokensToRedeem,bool toBackingToken) external nonReentrant {_exitTempusAMMAndRedeem(tempusAMM,principals,yields,principalsStaked,yieldsStaked,maxLpTokensToRedeem,toBackingToken);}function exitTempusAmmAndRedeem(ITempusAMM tempusAMM,uint256 lpTokens,uint256 principals,uint256 yields,uint256 minPrincipalsStaked,uint256 minYieldsStaked,uint256 maxLeftoverShares,bool toBackingToken) external nonReentrant {_exitTempusAmmAndRedeem(tempusAMM,lpTokens,principals,yields,getAMMOrderedAmounts(tempusAMM.tempusPool(), minPrincipalsStaked, minYieldsStaked),maxLeftoverShares,toBackingToken);}function finalize(ITempusPool targetPool) external nonReentrant {targetPool.finalize();}function transferFees(ITempusPool targetPool, address recipient) external nonReentrant {targetPool.transferFees(msg.sender, recipient);}function swap(ITempusAMM tempusAMM,uint256 swapAmount,IERC20 tokenIn,IERC20 tokenOut,uint256 minReturn) private {require(swapAmount > 0, "Invalid swap amount.");tokenIn.safeIncreaseAllowance(address(tempusAMM.getVault()), swapAmount);(IVault vault, bytes32 poolId, , ) = _getAMMDetailsAndEnsureInitialized(tempusAMM);IVault.SingleSwap memory singleSwap = IVault.SingleSwap({poolId: poolId,kind: IVault.SwapKind.GIVEN_IN,assetIn: tokenIn,assetOut: tokenOut,amount: swapAmount,userData: ""});IVault.FundManagement memory fundManagement = IVault.FundManagement({sender: address(this),fromInternalBalance: false,recipient: payable(address(this)),toInternalBalance: false});vault.swap(singleSwap, fundManagement, minReturn, block.timestamp);}function _depositAndProvideLiquidity(ITempusAMM tempusAMM,uint256 tokenAmount,bool isBackingToken) private {(IVault vault,bytes32 poolId,IERC20[] memory ammTokens,uint256[] memory ammBalances) = _getAMMDetailsAndEnsureInitialized(tempusAMM);uint256 mintedShares = _deposit(tempusAMM.tempusPool(), tokenAmount, isBackingToken);uint256[] memory sharesUsed = _provideLiquidity(address(this),vault,poolId,ammTokens,ammBalances,mintedShares,msg.sender);if (sharesUsed[0] < mintedShares) {ammTokens[0].safeTransfer(msg.sender, mintedShares - sharesUsed[0]);}if (sharesUsed[1] < mintedShares) {ammTokens[1].safeTransfer(msg.sender, mintedShares - sharesUsed[1]);}}function _provideLiquidity(address sender,IVault vault,bytes32 poolId,IERC20[] memory ammTokens,uint256[] memory ammBalances,uint256 sharesAmount,address recipient) private returns (uint256[] memory) {uint256[] memory ammLiquidityProvisionAmounts = ammBalances.getLiquidityProvisionSharesAmounts(sharesAmount);if (sender != address(this)) {ammTokens[0].safeTransferFrom(sender, address(this), ammLiquidityProvisionAmounts[0]);ammTokens[1].safeTransferFrom(sender, address(this), ammLiquidityProvisionAmounts[1]);}ammTokens[0].safeIncreaseAllowance(address(vault), ammLiquidityProvisionAmounts[0]);ammTokens[1].safeIncreaseAllowance(address(vault), ammLiquidityProvisionAmounts[1]);IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest({assets: ammTokens,maxAmountsIn: ammLiquidityProvisionAmounts,userData: abi.encode(uint8(ITempusAMM.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT), ammLiquidityProvisionAmounts),fromInternalBalance: false});vault.joinPool(poolId, address(this), recipient, request);return ammLiquidityProvisionAmounts;}function _depositAndFix(ITempusAMM tempusAMM,uint256 tokenAmount,bool isBackingToken,uint256 minTYSRate) private {ITempusPool targetPool = tempusAMM.tempusPool();IERC20 principalShares = IERC20(address(targetPool.principalShare()));IERC20 yieldShares = IERC20(address(targetPool.yieldShare()));uint256 swapAmount = _deposit(targetPool, tokenAmount, isBackingToken);yieldShares.safeIncreaseAllowance(address(tempusAMM.getVault()), swapAmount);uint256 minReturn = swapAmount.mulfV(minTYSRate, targetPool.backingTokenONE());swap(tempusAMM, swapAmount, yieldShares, principalShares, minReturn);uint256 principalsBalance = principalShares.balanceOf(address(this));assert(principalsBalance > 0);assert(yieldShares.balanceOf(address(this)) == 0);principalShares.safeTransfer(msg.sender, principalsBalance);}function _deposit(ITempusPool targetPool,uint256 tokenAmount,bool isBackingToken) private returns (uint256 mintedShares) {mintedShares = isBackingToken? _depositBacking(targetPool, tokenAmount, address(this)): _depositYieldBearing(targetPool, tokenAmount, address(this));}function _depositYieldBearing(ITempusPool targetPool,uint256 yieldTokenAmount,address recipient) private returns (uint256) {require(yieldTokenAmount > 0, "yieldTokenAmount is 0");IERC20 yieldBearingToken = IERC20(targetPool.yieldBearingToken());uint transferredYBT = yieldBearingToken.untrustedTransferFrom(msg.sender, address(this), yieldTokenAmount);yieldBearingToken.safeIncreaseAllowance(address(targetPool), transferredYBT);(uint mintedShares, uint depositedBT, uint fee, uint rate) = targetPool.deposit(transferredYBT, recipient);emit Deposited(address(targetPool),msg.sender,recipient,transferredYBT,depositedBT,mintedShares,rate,fee);return mintedShares;}function _depositBacking(ITempusPool targetPool,uint256 backingTokenAmount,address recipient) private returns (uint256) {require(backingTokenAmount > 0, "backingTokenAmount is 0");IERC20 backingToken = IERC20(targetPool.backingToken());if (msg.value == 0) {backingTokenAmount = backingToken.untrustedTransferFrom(msg.sender, address(this), backingTokenAmount);backingToken.safeIncreaseAllowance(address(targetPool), backingTokenAmount);} else {require(address(backingToken) == address(0), "given TempusPool's Backing Token is not ETH");}(uint256 mintedShares, uint256 depositedYBT, uint256 fee, uint256 interestRate) = targetPool.depositBacking{value: msg.value}(backingTokenAmount, recipient);emit Deposited(address(targetPool),msg.sender,recipient,depositedYBT,backingTokenAmount,mintedShares,interestRate,fee);return mintedShares;}function _redeemToYieldBearing(ITempusPool targetPool,address sender,uint256 principals,uint256 yields,address recipient) private {require((principals > 0) || (yields > 0), "principalAmount and yieldAmount cannot both be 0");(uint redeemedYBT, uint fee, uint interestRate) = targetPool.redeem(sender, principals, yields, recipient);uint redeemedBT = targetPool.numAssetsPerYieldToken(redeemedYBT, targetPool.currentInterestRate());bool earlyRedeem = !targetPool.matured();emit Redeemed(address(targetPool),sender,recipient,principals,yields,redeemedYBT,redeemedBT,fee,interestRate,earlyRedeem);}function _redeemToBacking(ITempusPool targetPool,address sender,uint256 principals,uint256 yields,address recipient) private {require((principals > 0) || (yields > 0), "principalAmount and yieldAmount cannot both be 0");(uint redeemedYBT, uint redeemedBT, uint fee, uint rate) = targetPool.redeemToBacking(sender,principals,yields,recipient);bool earlyRedeem = !targetPool.matured();emit Redeemed(address(targetPool),sender,recipient,principals,yields,redeemedYBT,redeemedBT,fee,rate,earlyRedeem);}function _exitTempusAMM(ITempusAMM tempusAMM,uint256 lpTokensAmount,uint256 principalAmountOutMin,uint256 yieldAmountOutMin,bool toInternalBalances) private {require(tempusAMM.transferFrom(msg.sender, address(this), lpTokensAmount), "LP token transfer failed");ITempusPool tempusPool = tempusAMM.tempusPool();uint256[] memory amounts = getAMMOrderedAmounts(tempusPool, principalAmountOutMin, yieldAmountOutMin);_exitTempusAMMGivenLP(tempusAMM, address(this), msg.sender, lpTokensAmount, amounts, toInternalBalances);assert(tempusAMM.balanceOf(address(this)) == 0);}function _exitTempusAMMGivenLP(ITempusAMM tempusAMM,address sender,address recipient,uint256 lpTokensAmount,uint256[] memory minAmountsOut,bool toInternalBalances) private {require(lpTokensAmount > 0, "LP token amount is 0");(IVault vault, bytes32 poolId, IERC20[] memory ammTokens, ) = _getAMMDetailsAndEnsureInitialized(tempusAMM);IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest({assets: ammTokens,minAmountsOut: minAmountsOut,userData: abi.encode(uint8(ITempusAMM.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT), lpTokensAmount),toInternalBalance: toInternalBalances});vault.exitPool(poolId, sender, payable(recipient), request);}function _exitTempusAMMGivenAmountsOut(ITempusAMM tempusAMM,address sender,address recipient,uint256[] memory amountsOut,uint256 lpTokensAmountInMax,bool toInternalBalances) private {(IVault vault, bytes32 poolId, IERC20[] memory ammTokens, ) = _getAMMDetailsAndEnsureInitialized(tempusAMM);IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest({assets: ammTokens,minAmountsOut: amountsOut,userData: abi.encode(uint8(ITempusAMM.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT),amountsOut,lpTokensAmountInMax),toInternalBalance: toInternalBalances});vault.exitPool(poolId, sender, payable(recipient), request);}function _exitTempusAMMAndRedeem(ITempusAMM tempusAMM,uint256 principals,uint256 yields,uint256 principalsStaked,uint256 yieldsStaked,uint256 maxLpTokensToRedeem,bool toBackingToken) private {ITempusPool tempusPool = tempusAMM.tempusPool();require(!tempusPool.matured(), "Pool already finalized");principals += principalsStaked;yields += yieldsStaked;require(principals == yields, "Needs equal amounts of shares before maturity");require(tempusAMM.transferFrom(msg.sender, address(this), maxLpTokensToRedeem), "LP token transfer failed");uint256[] memory amounts = getAMMOrderedAmounts(tempusPool, principalsStaked, yieldsStaked);_exitTempusAMMGivenAmountsOut(tempusAMM, address(this), msg.sender, amounts, maxLpTokensToRedeem, false);uint256 lpTokenBalance = tempusAMM.balanceOf(address(this));require(tempusAMM.transferFrom(address(this), msg.sender, lpTokenBalance), "LP token transfer failed");if (toBackingToken) {_redeemToBacking(tempusPool, msg.sender, principals, yields, msg.sender);} else {_redeemToYieldBearing(tempusPool, msg.sender, principals, yields, msg.sender);}}function _exitTempusAmmAndRedeem(ITempusAMM tempusAMM,uint256 lpTokens,uint256 principals,uint256 yields,uint256[] memory minLpAmountsOut,uint256 maxLeftoverShares,bool toBackingToken) private {ITempusPool tempusPool = tempusAMM.tempusPool();IERC20 principalShare = IERC20(address(tempusPool.principalShare()));IERC20 yieldShare = IERC20(address(tempusPool.yieldShare()));require(principalShare.transferFrom(msg.sender, address(this), principals), "Principals transfer failed");require(yieldShare.transferFrom(msg.sender, address(this), yields), "Yields transfer failed");if (lpTokens > 0) {require(tempusAMM.transferFrom(msg.sender, address(this), lpTokens), "LP token transfer failed");_exitTempusAMMGivenLP(tempusAMM, address(this), address(this), lpTokens, minLpAmountsOut, false);}principals = principalShare.balanceOf(address(this));yields = yieldShare.balanceOf(address(this));if (!tempusPool.matured()) {bool yieldsIn = yields > principals;uint256 difference = yieldsIn ? (yields - principals) : (principals - yields);if (difference >= maxLeftoverShares) {(IERC20 tokenIn, IERC20 tokenOut) = yieldsIn? (yieldShare, principalShare): (principalShare, yieldShare);swap(tempusAMM,tempusAMM.getSwapAmountToEndWithEqualShares(principals, yields, maxLeftoverShares),tokenIn,tokenOut,0);principals = principalShare.balanceOf(address(this));yields = yieldShare.balanceOf(address(this));}(yields, principals) = (principals <= yields) ? (principals, principals) : (yields, yields);}if (toBackingToken) {_redeemToBacking(tempusPool, address(this), principals, yields, msg.sender);} else {_redeemToYieldBearing(tempusPool, address(this), principals, yields, msg.sender);}}function _getAMMDetailsAndEnsureInitialized(ITempusAMM tempusAMM)privateviewreturns (IVault vault,bytes32 poolId,IERC20[] memory ammTokens,uint256[] memory ammBalances){vault = tempusAMM.getVault();poolId = tempusAMM.getPoolId();(ammTokens, ammBalances, ) = vault.getPoolTokens(poolId);require(ammTokens.length == 2 && ammBalances.length == 2 && ammBalances[0] > 0 && ammBalances[1] > 0,"AMM not initialized");}function getAMMOrderedAmounts(ITempusPool tempusPool,uint256 principalAmount,uint256 yieldAmount) private view returns (uint256[] memory) {uint256[] memory amounts = new uint256[](2);(amounts[0], amounts[1]) = (tempusPool.principalShare() < tempusPool.yieldShare())? (principalAmount, yieldAmount): (yieldAmount, principalAmount);return amounts;}}