pragma solidity >0.7.0;contract nTokenAction is StorageLayoutV1, nTokenERC20 {using BalanceHandler for BalanceState;using AssetRate for AssetRateParameters;using AccountContextHandler for AccountContext;using SafeInt256 for int256;using SafeMath for uint256;function nTokenTotalSupply(address nTokenAddress)externalviewoverridereturns (uint256 totalSupply){(totalSupply,) = nTokenHandler.getStoredNTokenSupplyFactors(nTokenAddress);}function nTokenBalanceOf(uint16 currencyId, address account)externalviewoverridereturns (uint256){(int256 nTokenBalance,) = BalanceHandler.getBalanceStorage(account, currencyId);require(nTokenBalance >= 0);return uint256(nTokenBalance);}function nTokenTransferAllowance(uint16 currencyId,address owner,address spender) external view override returns (uint256) {uint256 allowance = nTokenWhitelist[owner][spender];if (allowance > 0) return allowance;return nTokenAllowance[owner][spender][currencyId];}function nTokenTransferApprove(uint16 currencyId,address owner,address spender,uint256 amount) external override returns (bool) {address nTokenAddress = nTokenHandler.nTokenAddress(currencyId);require(msg.sender == nTokenAddress, "Unauthorized caller");nTokenAllowance[owner][spender][currencyId] = amount;return true;}function nTokenTransfer(uint16 currencyId,address from,address to,uint256 amount) external override returns (bool) {address nTokenAddress = nTokenHandler.nTokenAddress(currencyId);require(msg.sender == nTokenAddress, "Unauthorized caller");return _transfer(currencyId, from, to, amount);}function nTokenTransferFrom(uint16 currencyId,address spender,address from,address to,uint256 amount) external override returns (bool, uint256) {address nTokenAddress = nTokenHandler.nTokenAddress(currencyId);require(msg.sender == nTokenAddress, "Unauthorized caller");uint256 allowance = nTokenWhitelist[from][spender];if (allowance > 0) {require(allowance >= amount, "Insufficient allowance");allowance = allowance.sub(amount);nTokenWhitelist[from][spender] = allowance;} else {allowance = nTokenAllowance[from][spender][currencyId];require(allowance >= amount, "Insufficient allowance");allowance = allowance.sub(amount);nTokenAllowance[from][spender][currencyId] = allowance;}bool success = _transfer(currencyId, from, to, amount);return (success, allowance);}function nTokenTransferApproveAll(address spender, uint256 amount)externaloverridereturns (bool){nTokenWhitelist[msg.sender][spender] = amount;emit Approval(msg.sender, spender, amount);return true;}function nTokenClaimIncentives() external override returns (uint256) {address account = msg.sender;AccountContext memory accountContext = AccountContextHandler.getAccountContext(account);uint256 totalIncentivesClaimed;BalanceState memory balanceState;if (accountContext.bitmapCurrencyId != 0) {balanceState.loadBalanceState(account, accountContext.bitmapCurrencyId, accountContext);if (balanceState.storedNTokenBalance > 0) {totalIncentivesClaimed = totalIncentivesClaimed.add(BalanceHandler.claimIncentivesManual(balanceState, account));}}bytes18 currencies = accountContext.activeCurrencies;while (currencies != 0) {uint256 currencyId = uint256(uint16(bytes2(currencies) & Constants.UNMASK_FLAGS));balanceState.loadBalanceState(account, currencyId, accountContext);if (balanceState.storedNTokenBalance > 0) {totalIncentivesClaimed = totalIncentivesClaimed.add(BalanceHandler.claimIncentivesManual(balanceState, account));}currencies = currencies << 16;}return totalIncentivesClaimed;}function nTokenPresentValueAssetDenominated(uint16 currencyId)externalviewoverridereturns (int256){(int256 totalAssetPV,) = _getNTokenPV(currencyId);return totalAssetPV;}function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)externalviewoverridereturns (int256){(int256 totalAssetPV, nTokenPortfolio memory nToken) = _getNTokenPV(currencyId);return nToken.cashGroup.assetRate.convertToUnderlying(totalAssetPV);}function _getNTokenPV(uint256 currencyId)privateviewreturns (int256, nTokenPortfolio memory){uint256 blockTime = block.timestamp;nTokenPortfolio memory nToken;nTokenHandler.loadNTokenPortfolioView(currencyId, nToken);(int256 totalAssetPV,) = nTokenHandler.getNTokenAssetPV(nToken, blockTime);return (totalAssetPV, nToken);}function _transfer(uint256 currencyId,address sender,address recipient,uint256 amount) internal returns (bool) {{(uint256 isNToken,) = nTokenHandler.getNTokenContext(recipient);require(isNToken == 0, "Cannot transfer to nToken");}AccountContext memory senderContext = AccountContextHandler.getAccountContext(sender);BalanceState memory senderBalance;senderBalance.loadBalanceState(sender, currencyId, senderContext);AccountContext memory recipientContext = AccountContextHandler.getAccountContext(recipient);BalanceState memory recipientBalance;recipientBalance.loadBalanceState(recipient, currencyId, recipientContext);int256 amountInt = SafeCast.toInt256(amount);senderBalance.netNTokenTransfer = amountInt.neg();recipientBalance.netNTokenTransfer = amountInt;senderBalance.finalize(sender, senderContext, false);recipientBalance.finalize(recipient, recipientContext, false);senderContext.setAccountContext(sender);recipientContext.setAccountContext(recipient);emit Transfer(sender, recipient, amount);return true;}}