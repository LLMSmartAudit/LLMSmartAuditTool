pragma solidity 0.8.4;import "./facades/FlanLike.sol";import "./facades/PyroTokenLike.sol";import "./DAO/Governable.sol";import "./ERC677/ERC20Burnable.sol";import "./facades/UniPairLike.sol";import "hardhat/console.sol";contract FlanBackstop is Governable {constructor(address dao,address flan,address pyroFlan) Governable(dao) {config.pyroFlan = pyroFlan;config.flan = flan;IERC20(flan).approve(pyroFlan, 2**256 - 1);}struct ConfigVars {address flan;address pyroFlan;mapping(address => address) flanLPs;mapping(address => address) pyroFlanLPs;mapping(address => uint256) acceptableHighestPrice;mapping(address => uint8) decimalPlaces;}ConfigVars public config;function setBacker(address stablecoin,address flanLP,address pyroFlanLP,uint256 acceptableHighestPrice,uint8 decimalPlaces) external onlySuccessfulProposal {config.flanLPs[stablecoin] = flanLP;config.pyroFlanLPs[stablecoin] = pyroFlanLP;config.acceptableHighestPrice[stablecoin] = acceptableHighestPrice;config.decimalPlaces[stablecoin] = decimalPlaces;}function purchasePyroFlan(address stablecoin, uint256 amount) external {uint normalizedAmount = normalize(stablecoin, amount);address flanLP = config.flanLPs[stablecoin];address pyroFlanLP = config.pyroFlanLPs[stablecoin];require(flanLP != address(0) && pyroFlanLP != address(0), "BACKSTOP: configure stablecoin");uint256 balanceOfFlanBefore = IERC20(config.flan).balanceOf(flanLP);uint256 balanceOfStableBefore = IERC20(stablecoin).balanceOf(flanLP);uint256 priceBefore = (balanceOfFlanBefore * getMagnitude(stablecoin)) / balanceOfStableBefore;FlanLike(config.flan).mint(address(this), normalizedAmount / 2);IERC20(config.flan).transfer(flanLP, normalizedAmount / 4);IERC20(stablecoin).transferFrom(msg.sender, flanLP, amount / 2);UniPairLike(flanLP).mint(address(this));uint256 redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();PyroTokenLike(config.pyroFlan).mint(pyroFlanLP, normalizedAmount / 4);redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();IERC20(stablecoin).transferFrom(msg.sender, pyroFlanLP, amount / 2);UniPairLike(pyroFlanLP).mint(address(this));uint256 balanceOfFlan = IERC20(config.flan).balanceOf(flanLP);uint256 balanceOfStable = IERC20(stablecoin).balanceOf(flanLP);uint256 tiltedPrice = (balanceOfFlan * getMagnitude(stablecoin)) / balanceOfStable;require(tiltedPrice < config.acceptableHighestPrice[stablecoin], "BACKSTOP: potential price manipulation");uint256 growth = ((priceBefore - tiltedPrice) * 100) / priceBefore;uint256 flanToMint = (tiltedPrice * normalizedAmount) / (1 ether);uint256 premium = (flanToMint * (growth / 2)) / 100;FlanLike(config.flan).mint(address(this), flanToMint + premium);redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();PyroTokenLike(config.pyroFlan).mint(msg.sender, flanToMint + premium);redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();}function getMagnitude(address token) internal view returns (uint256) {uint256 places = config.decimalPlaces[token];return 10**places;}function normalize(address token, uint256 amount) internal view returns (uint256) {uint256 places = config.decimalPlaces[token];uint256 bump = 10**(18 - places);return amount * bump;}}