pragma solidity 0.8.4;import "./interfaces/IFulfillHelper.sol";import "./interfaces/ITransactionManager.sol";import "./lib/LibAsset.sol";import "./lib/LibERC20.sol";import "@openzeppelin/contracts/security/ReentrancyGuard.sol";import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";contract TransactionManager is ReentrancyGuard, ITransactionManager {mapping(address => mapping(address => uint256)) public routerBalances;mapping(address => uint256[]) public activeTransactionBlocks;mapping(bytes32 => bytes32) public variantTransactionData;uint256 public immutable chainId;uint256 public constant MIN_TIMEOUT = 24 hours;constructor(uint256 _chainId) {chainId = _chainId;}function addLiquidity(uint256 amount, address assetId, address router) external payable override nonReentrant {require(amount > 0, "addLiquidity: AMOUNT_IS_ZERO");if (LibAsset.isEther(assetId)) {require(msg.value == amount, "addLiquidity: VALUE_MISMATCH");} else {require(msg.value == 0, "addLiquidity: ETH_WITH_ERC_TRANSFER");require(LibERC20.transferFrom(assetId, router, address(this), amount), "addLiquidity: ERC20_TRANSFER_FAILED");}routerBalances[router][assetId] += amount;emit LiquidityAdded(router, assetId, amount, msg.sender);}function removeLiquidity(uint256 amount,address assetId,address payable recipient) external override nonReentrant {require(amount > 0, "removeLiquidity: AMOUNT_IS_ZERO");require(routerBalances[msg.sender][assetId] >= amount, "removeLiquidity: INSUFFICIENT_FUNDS");routerBalances[msg.sender][assetId] -= amount;require(LibAsset.transferAsset(assetId, recipient, amount), "removeLiquidity: TRANSFER_FAILED");emit LiquidityRemoved(msg.sender, assetId, amount, recipient);}function prepare(InvariantTransactionData calldata invariantData,uint256 amount,uint256 expiry,bytes calldata encryptedCallData,bytes calldata encodedBid,bytes calldata bidSignature) external payable override nonReentrant returns (TransactionData memory) {require(invariantData.user != address(0), "prepare: USER_EMPTY");require(invariantData.router != address(0), "prepare: ROUTER_EMPTY");require(invariantData.receivingAddress != address(0), "prepare: RECEIVING_ADDRESS_EMPTY");require(invariantData.sendingChainId != invariantData.receivingChainId, "prepare: SAME_CHAINIDS");require(invariantData.sendingChainId == chainId || invariantData.receivingChainId == chainId, "prepare: INVALID_CHAINIDS");require((expiry - block.timestamp) >= MIN_TIMEOUT, "prepare: TIMEOUT_TOO_LOW");bytes32 digest = keccak256(abi.encode(invariantData));require(variantTransactionData[digest] == bytes32(0), "prepare: DIGEST_EXISTS");variantTransactionData[digest] = keccak256(abi.encode(VariantTransactionData({amount: amount,expiry: expiry,preparedBlockNumber: block.number})));activeTransactionBlocks[invariantData.user].push(block.number);if (invariantData.sendingChainId == chainId) {require(amount > 0, "prepare: AMOUNT_IS_ZERO");if (LibAsset.isEther(invariantData.sendingAssetId)) {require(msg.value == amount, "prepare: VALUE_MISMATCH");} else {require(msg.value == 0, "prepare: ETH_WITH_ERC_TRANSFER");require(LibERC20.transferFrom(invariantData.sendingAssetId, msg.sender, address(this), amount),"prepare: ERC20_TRANSFER_FAILED");}} else {require(msg.sender == invariantData.router, "prepare: ROUTER_MISMATCH");require(msg.value == 0, "prepare: ETH_WITH_ROUTER_PREPARE");require(routerBalances[invariantData.router][invariantData.receivingAssetId] >= amount,"prepare: INSUFFICIENT_LIQUIDITY");routerBalances[invariantData.router][invariantData.receivingAssetId] -= amount;}TransactionData memory txData = TransactionData({user: invariantData.user,router: invariantData.router,sendingAssetId: invariantData.sendingAssetId,receivingAssetId: invariantData.receivingAssetId,sendingChainFallback: invariantData.sendingChainFallback,callTo: invariantData.callTo,receivingAddress: invariantData.receivingAddress,callDataHash: invariantData.callDataHash,transactionId: invariantData.transactionId,sendingChainId: invariantData.sendingChainId,receivingChainId: invariantData.receivingChainId,amount: amount,expiry: expiry,preparedBlockNumber: block.number});emit TransactionPrepared(txData.user, txData.router, txData.transactionId, txData, msg.sender, encryptedCallData, encodedBid, bidSignature);return txData;}function fulfill(TransactionData calldata txData,uint256 relayerFee,bytes calldata signature, // signature on fee + digestbytes calldata callData) external override nonReentrant returns (TransactionData memory) {bytes32 digest = hashInvariantTransactionData(txData);require(variantTransactionData[digest] == hashVariantTransactionData(txData), "fulfill: INVALID_VARIANT_DATA");require(txData.expiry > block.timestamp, "fulfill: EXPIRED");require(txData.preparedBlockNumber > 0, "fulfill: ALREADY_COMPLETED");require(recoverFulfillSignature(txData, relayerFee, signature) == txData.user, "fulfill: INVALID_SIGNATURE");require(relayerFee <= txData.amount, "fulfill: INVALID_RELAYER_FEE");require(keccak256(callData) == txData.callDataHash, "fulfill: INVALID_CALL_DATA");variantTransactionData[digest] = keccak256(abi.encode(VariantTransactionData({amount: txData.amount,expiry: txData.expiry,preparedBlockNumber: 0})));removeUserActiveBlocks(txData.user, txData.preparedBlockNumber);if (txData.sendingChainId == chainId) {require(msg.sender == txData.router, "fulfill: ROUTER_MISMATCH");routerBalances[txData.router][txData.sendingAssetId] += txData.amount;} else {uint256 toSend = txData.amount - relayerFee;if (relayerFee > 0) {require(LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee),"fulfill: FEE_TRANSFER_FAILED");}if (txData.callTo == address(0)) {require(LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),"fulfill: TRANSFER_FAILED");} else {if (!LibAsset.isEther(txData.receivingAssetId) && toSend > 0) {require(LibERC20.approve(txData.receivingAssetId, txData.callTo, toSend), "fulfill: APPROVAL_FAILED");}if (toSend > 0) {tryIFulfillHelper(txData.callTo).addFunds{ value: LibAsset.isEther(txData.receivingAssetId) ? toSend : 0}(txData.user,txData.transactionId,txData.receivingAssetId,toSend){} catch {require(LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),"fulfill: TRANSFER_FAILED");}}tryIFulfillHelper(txData.callTo).execute(txData.user,txData.transactionId,txData.receivingAssetId,toSend,callData){} catch {require(LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),"fulfill: TRANSFER_FAILED");}}}emit TransactionFulfilled(txData.user, txData.router, txData.transactionId, txData, relayerFee, signature, callData, msg.sender);return txData;}function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)externaloverridenonReentrantreturns (TransactionData memory){bytes32 digest = hashInvariantTransactionData(txData);require(variantTransactionData[digest] == hashVariantTransactionData(txData), "cancel: INVALID_VARIANT_DATA");require(txData.preparedBlockNumber > 0, "cancel: ALREADY_COMPLETED");require(relayerFee <= txData.amount, "cancel: INVALID_RELAYER_FEE");variantTransactionData[digest] = keccak256(abi.encode(VariantTransactionData({amount: txData.amount,expiry: txData.expiry,preparedBlockNumber: 0})));removeUserActiveBlocks(txData.user, txData.preparedBlockNumber);if (txData.sendingChainId == chainId) {if (txData.expiry >= block.timestamp) {require(msg.sender == txData.router, "cancel: ROUTER_MUST_CANCEL");require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), txData.amount),"cancel: TRANSFER_FAILED");} else {if (relayerFee > 0) {require(recoverCancelSignature(txData, relayerFee, signature) == txData.user, "cancel: INVALID_SIGNATURE");require(LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee),"cancel: FEE_TRANSFER_FAILED");}uint256 toRefund = txData.amount - relayerFee;if (toRefund > 0) {require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund),"cancel: TRANSFER_FAILED");}}} else {if (txData.expiry >= block.timestamp) {require(recoverCancelSignature(txData, relayerFee, signature) == txData.user, "cancel: INVALID_SIGNATURE");}routerBalances[txData.router][txData.receivingAssetId] += txData.amount;}emit TransactionCancelled(txData.user, txData.router, txData.transactionId, txData, relayerFee, msg.sender);return txData;}function getActiveTransactionBlocks(address user) external override view returns (uint256[] memory) {return activeTransactionBlocks[user];}function removeUserActiveBlocks(address user, uint256 preparedBlock) internal {uint256 newLength = activeTransactionBlocks[user].length - 1;uint256[] memory updated = new uint256[](newLength);bool removed = false;uint256 updatedIdx = 0;for (uint256 i; i < newLength + 1; i++) {if (!removed && activeTransactionBlocks[user][i] == preparedBlock) {removed = true;continue;}updated[updatedIdx] = activeTransactionBlocks[user][i];updatedIdx++;}activeTransactionBlocks[user] = updated;}function recoverFulfillSignature(TransactionData calldata txData,uint256 relayerFee,bytes calldata signature) internal pure returns (address) {SignedFulfillData memory payload = SignedFulfillData({transactionId: txData.transactionId, relayerFee: relayerFee});return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);}function recoverCancelSignature(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)internalpurereturns (address){SignedCancelData memory payload = SignedCancelData({transactionId: txData.transactionId, cancel: "cancel", relayerFee: relayerFee});return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);}function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {InvariantTransactionData memory invariant = InvariantTransactionData({user: txData.user,router: txData.router,sendingAssetId: txData.sendingAssetId,receivingAssetId: txData.receivingAssetId,sendingChainFallback: txData.sendingChainFallback,callTo: txData.callTo,receivingAddress: txData.receivingAddress,sendingChainId: txData.sendingChainId,receivingChainId: txData.receivingChainId,callDataHash: txData.callDataHash,transactionId: txData.transactionId});return keccak256(abi.encode(invariant));}function hashVariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {return keccak256(abi.encode(VariantTransactionData({amount: txData.amount,expiry: txData.expiry,preparedBlockNumber: txData.preparedBlockNumber})));}}