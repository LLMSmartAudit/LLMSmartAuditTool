pragma solidity >0.7.0;contract CompoundToNotionalV2 {NotionalProxy public immutable NotionalV2;address public owner;constructor(NotionalProxy notionalV2_) {NotionalV2 = notionalV2_;owner = msg.sender;}function enableToken(address token, address spender) external {require(msg.sender == owner, "Unauthorized");CTokenInterface(token).approve(spender, type(uint256).max);}function migrateBorrowFromCompound(address cTokenBorrow,uint256 cTokenRepayAmount,uint16[] memory notionalV2CollateralIds,uint256[] memory notionalV2CollateralAmounts,BalanceActionWithTrades[] calldata borrowAction) external {uint256 borrowBalance = CTokenInterface(cTokenBorrow).borrowBalanceCurrent(msg.sender);if (cTokenRepayAmount == 0) {cTokenRepayAmount = borrowBalance;} else {require(cTokenRepayAmount <= borrowBalance, "Invalid repayment amount");}bytes memory encodedData = abi.encode(cTokenBorrow,cTokenRepayAmount,notionalV2CollateralIds,notionalV2CollateralAmounts);NotionalV2.batchBalanceAndTradeActionWithCallback(msg.sender, borrowAction, encodedData);}function notionalCallback(address sender,address account,bytes calldata callbackData) external returns (uint256) {require(sender == address(this), "Unauthorized callback");(address cTokenBorrow,uint256 cTokenRepayAmount,uint16[] memory notionalV2CollateralIds,uint256[] memory notionalV2CollateralAmounts) = abi.decode(callbackData, (address, uint256, uint16[], uint256[]));address underlyingToken = CTokenInterface(cTokenBorrow).underlying();bool success = IERC20(underlyingToken).transferFrom(account, address(this), cTokenRepayAmount);require(success, "Transfer of repayment failed");uint code = CErc20Interface(cTokenBorrow).repayBorrowBehalf(account, cTokenRepayAmount);require(code == 0, "Repay borrow behalf failed");for (uint256 i; i < notionalV2CollateralIds.length; i++) {(Token memory assetToken, /* */) = NotionalV2.getCurrency(notionalV2CollateralIds[i]);success = CTokenInterface(assetToken.tokenAddress).transferFrom(account, address(this), notionalV2CollateralAmounts[i]);require(success, "cToken transfer failed");NotionalV2.depositAssetToken(account, notionalV2CollateralIds[i], notionalV2CollateralAmounts[i]);}}receive() external payable {revert("Cannot transfer ETH");}}