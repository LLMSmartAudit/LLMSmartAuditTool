pragma solidity 0.8.6; contract TwabRewards is ITwabRewards {using SafeERC20 for IERC20;ITicket public immutable ticket;uint32 public constant GRACE_PERIOD = 60 days;mapping(uint256 => Promotion) internal _promotions;uint256 internal _latestPromotionId;mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;event PromotionCreated(uint256 indexed promotionId);event PromotionEnded(uint256 indexed promotionId,address indexed recipient,uint256 amount,uint8 epochNumber);event PromotionDestroyed(uint256 indexed promotionId,address indexed recipient,uint256 amount);event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);event RewardsClaimed(uint256 indexed promotionId,uint8[] epochIds,address indexed user,uint256 amount);constructor(ITicket _ticket) {_requireTicket(_ticket);ticket = _ticket;}function createPromotion(IERC20 _token,uint64 _startTimestamp,uint256 _tokensPerEpoch,uint48 _epochDuration,uint8 _numberOfEpochs) external override returns (uint256) {require(_tokensPerEpoch > 0, "TwabRewards/tokens-not-zero");require(_epochDuration > 0, "TwabRewards/duration-not-zero");_requireNumberOfEpochs(_numberOfEpochs);uint256 _nextPromotionId = _latestPromotionId + 1;_latestPromotionId = _nextPromotionId;uint256 _amount = _tokensPerEpoch * _numberOfEpochs;_promotions[_nextPromotionId] = Promotion({creator: msg.sender,startTimestamp: _startTimestamp,numberOfEpochs: _numberOfEpochs,epochDuration: _epochDuration,createdAt: uint48(block.timestamp),token: _token,tokensPerEpoch: _tokensPerEpoch,rewardsUnclaimed: _amount});uint256 _beforeBalance = _token.balanceOf(address(this));_token.safeTransferFrom(msg.sender, address(this), _amount);uint256 _afterBalance = _token.balanceOf(address(this));require(_beforeBalance + _amount == _afterBalance, "TwabRewards/promo-amount-diff");emit PromotionCreated(_nextPromotionId);return _nextPromotionId;}function endPromotion(uint256 _promotionId, address _to) external override returns (bool) {require(_to != address(0), "TwabRewards/payee-not-zero-addr");Promotion memory _promotion = _getPromotion(_promotionId);_requirePromotionCreator(_promotion);_requirePromotionActive(_promotion);uint8 _epochNumber = uint8(_getCurrentEpochId(_promotion));_promotions[_promotionId].numberOfEpochs = _epochNumber;uint256 _remainingRewards = _getRemainingRewards(_promotion);_promotions[_promotionId].rewardsUnclaimed -= _remainingRewards;_promotion.token.safeTransfer(_to, _remainingRewards);emit PromotionEnded(_promotionId, _to, _remainingRewards, _epochNumber);return true;}function destroyPromotion(uint256 _promotionId, address _to) external override returns (bool) {require(_to != address(0), "TwabRewards/payee-not-zero-addr");Promotion memory _promotion = _getPromotion(_promotionId);_requirePromotionCreator(_promotion);uint256 _promotionEndTimestamp = _getPromotionEndTimestamp(_promotion);uint256 _promotionCreatedAt = _promotion.createdAt;uint256 _gracePeriodEndTimestamp = (_promotionEndTimestamp < _promotionCreatedAt? _promotionCreatedAt: _promotionEndTimestamp) + GRACE_PERIOD;require(block.timestamp >= _gracePeriodEndTimestamp, "TwabRewards/grace-period-active");uint256 _rewardsUnclaimed = _promotion.rewardsUnclaimed;delete _promotions[_promotionId];_promotion.token.safeTransfer(_to, _rewardsUnclaimed);emit PromotionDestroyed(_promotionId, _to, _rewardsUnclaimed);return true;}function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)externaloverridereturns (bool){_requireNumberOfEpochs(_numberOfEpochs);Promotion memory _promotion = _getPromotion(_promotionId);_requirePromotionActive(_promotion);uint8 _currentNumberOfEpochs = _promotion.numberOfEpochs;require(_numberOfEpochs <= (type(uint8).max - _currentNumberOfEpochs),"TwabRewards/epochs-over-limit");_promotions[_promotionId].numberOfEpochs = _currentNumberOfEpochs + _numberOfEpochs;uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;_promotions[_promotionId].rewardsUnclaimed += _amount;_promotion.token.safeTransferFrom(msg.sender, address(this), _amount);emit PromotionExtended(_promotionId, _numberOfEpochs);return true;}function claimRewards(address _user,uint256 _promotionId,uint8[] calldata _epochIds) external override returns (uint256) {Promotion memory _promotion = _getPromotion(_promotionId);uint256 _rewardsAmount;uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];uint256 _epochIdsLength = _epochIds.length;for (uint256 index = 0; index < _epochIdsLength; index++) {uint8 _epochId = _epochIds[index];require(!_isClaimedEpoch(_userClaimedEpochs, _epochId), "TwabRewards/rewards-claimed");_rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);_userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);}_claimedEpochs[_promotionId][_user] = _userClaimedEpochs;_promotions[_promotionId].rewardsUnclaimed -= _rewardsAmount;_promotion.token.safeTransfer(_user, _rewardsAmount);emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);return _rewardsAmount;}function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {return _getPromotion(_promotionId);}function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {return _getCurrentEpochId(_getPromotion(_promotionId));}function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {return _getRemainingRewards(_getPromotion(_promotionId));}function getRewardsAmount(address _user,uint256 _promotionId,uint8[] calldata _epochIds) external view override returns (uint256[] memory) {Promotion memory _promotion = _getPromotion(_promotionId);uint256 _epochIdsLength = _epochIds.length;uint256[] memory _rewardsAmount = new uint256[](_epochIdsLength);for (uint256 index = 0; index < _epochIdsLength; index++) {if (_isClaimedEpoch(_claimedEpochs[_promotionId][_user], _epochIds[index])) {_rewardsAmount[index] = 0;} else {_rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);}}return _rewardsAmount;}function _requireTicket(ITicket _ticket) internal view {require(address(_ticket) != address(0), "TwabRewards/ticket-not-zero-addr");(bool succeeded, bytes memory data) = address(_ticket).staticcall(abi.encodePacked(_ticket.controller.selector));require(succeeded && data.length > 0 && abi.decode(data, (uint160)) != 0,"TwabRewards/invalid-ticket");}function _requireNumberOfEpochs(uint8 _numberOfEpochs) internal pure {require(_numberOfEpochs > 0, "TwabRewards/epochs-not-zero");}function _requirePromotionActive(Promotion memory _promotion) internal view {require(_getPromotionEndTimestamp(_promotion) > block.timestamp,"TwabRewards/promotion-inactive");}function _requirePromotionCreator(Promotion memory _promotion) internal view {require(msg.sender == _promotion.creator, "TwabRewards/only-promo-creator");}function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {Promotion memory _promotion = _promotions[_promotionId];require(_promotion.creator != address(0), "TwabRewards/invalid-promotion");return _promotion;}function _getPromotionEndTimestamp(Promotion memory _promotion)internalpurereturns (uint256){unchecked {return_promotion.startTimestamp + (_promotion.epochDuration * _promotion.numberOfEpochs);}}function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {uint256 _currentEpochId;if (block.timestamp > _promotion.startTimestamp) {unchecked {_currentEpochId =(block.timestamp - _promotion.startTimestamp) /_promotion.epochDuration;}}return _currentEpochId;}function _calculateRewardAmount(address _user,Promotion memory _promotion,uint8 _epochId) internal view returns (uint256) {uint64 _epochDuration = _promotion.epochDuration;uint64 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);uint64 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;require(block.timestamp >= _epochEndTimestamp, "TwabRewards/epoch-not-over");require(_epochId < _promotion.numberOfEpochs, "TwabRewards/invalid-epoch-id");uint256 _averageBalance = ticket.getAverageBalanceBetween(_user,_epochStartTimestamp,_epochEndTimestamp);if (_averageBalance > 0) {uint64[] memory _epochStartTimestamps = new uint64[](1);_epochStartTimestamps[0] = _epochStartTimestamp;uint64[] memory _epochEndTimestamps = new uint64[](1);_epochEndTimestamps[0] = _epochEndTimestamp;uint256 _averageTotalSupply = ticket.getAverageTotalSuppliesBetween(_epochStartTimestamps,_epochEndTimestamps)[0];return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupply;}return 0;}function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {if (block.timestamp > _getPromotionEndTimestamp(_promotion)) {return 0;}return_promotion.tokensPerEpoch *(_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));}function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint8 _epochId)internalpurereturns (uint256){return _userClaimedEpochs | (uint256(1) << _epochId);}function _isClaimedEpoch(uint256 _userClaimedEpochs, uint8 _epochId)internalpurereturns (bool){return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;}}