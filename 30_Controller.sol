pragma solidity 0.6.12;import "@openzeppelin/contracts/math/SafeMath.sol";import "@openzeppelin/contracts/token/ERC20/IERC20.sol";import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";import "../interfaces/IController.sol";import "../interfaces/IConverter.sol";import "../interfaces/IVault.sol";import "../interfaces/IHarvester.sol";import "../interfaces/IStrategy.sol";import "../interfaces/IManager.sol";contract Controller is IController {using SafeERC20 for IERC20;using SafeMath for uint256;IManager public immutable override manager;bool public globalInvestEnabled;uint256 public maxStrategies;struct VaultDetail {address converter;uint256 balance;address[] strategies;mapping(address => uint256) balances;mapping(address => uint256) index;mapping(address => uint256) caps;}mapping(address => VaultDetail) internal _vaultDetails;mapping(address => address) internal _vaultStrategies;event Harvest(address indexed strategy);event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);event StrategyRemoved(address indexed vault, address indexed strategy);event StrategiesReordered(address indexed vault,address indexed strategy1,address indexed strategy2);constructor(address _manager)public{manager = IManager(_manager);globalInvestEnabled = true;maxStrategies = 10;}function addStrategy(address _vault,address _strategy,uint256 _cap,uint256 _timeout)externalnotHaltedonlyStrategistonlyStrategy(_strategy){require(manager.allowedVaults(_vault), "!_vault");require(_vaultDetails[_vault].converter != address(0), "!converter");require(_vaultStrategies[_strategy] == address(0), "Strategy is already added");uint256 index = _vaultDetails[_vault].strategies.length;require(index < maxStrategies, "!maxStrategies");_vaultDetails[_vault].strategies.push(_strategy);_vaultDetails[_vault].caps[_strategy] = _cap;_vaultDetails[_vault].index[_strategy] = index;_vaultStrategies[_strategy] = _vault;if (_timeout > 0) {IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);}emit StrategyAdded(_vault, _strategy, _cap);}function inCaseStrategyGetStuck(address _strategy,address _token)externalonlyStrategist{IStrategy(_strategy).withdraw(_token);IERC20(_token).safeTransfer(manager.treasury(),IERC20(_token).balanceOf(address(this)));}function inCaseTokensGetStuck(address _token,uint256 _amount)externalonlyStrategist{IERC20(_token).safeTransfer(manager.treasury(), _amount);}function removeStrategy(address _vault,address _strategy,uint256 _timeout)externalnotHaltedonlyStrategist{require(manager.allowedVaults(_vault), "!_vault");VaultDetail storage vaultDetail = _vaultDetails[_vault];uint256 index = vaultDetail.index[_strategy];uint256 tail = vaultDetail.strategies.length.sub(1);address replace = vaultDetail.strategies[tail];vaultDetail.strategies[index] = replace;vaultDetail.index[replace] = index;vaultDetail.strategies.pop();delete vaultDetail.index[_strategy];delete vaultDetail.caps[_strategy];delete vaultDetail.balances[_strategy];delete _vaultStrategies[_strategy];IStrategy(_strategy).withdrawAll();IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);emit StrategyRemoved(_vault, _strategy);}function reorderStrategies(address _vault,address _strategy1,address _strategy2)externalnotHaltedonlyStrategist{require(manager.allowedVaults(_vault), "!_vault");require(_vaultStrategies[_strategy1] == _vault, "!_strategy1");require(_vaultStrategies[_strategy2] == _vault, "!_strategy2");VaultDetail storage vaultDetail = _vaultDetails[_vault];uint256 index1 = vaultDetail.index[_strategy1];uint256 index2 = vaultDetail.index[_strategy2];vaultDetail.strategies[index1] = _strategy2;vaultDetail.strategies[index2] = _strategy1;vaultDetail.index[_strategy1] = index2;vaultDetail.index[_strategy2] = index1;emit StrategiesReordered(_vault, _strategy1, _strategy2);}function setCap(address _vault,address _strategy,uint256 _cap,address _convert)externalnotHaltedonlyStrategistonlyStrategy(_strategy){_vaultDetails[_vault].caps[_strategy] = _cap;uint256 _balance = IStrategy(_strategy).balanceOf();if (_balance > _cap && _cap != 0) {uint256 _diff = _balance.sub(_cap);IStrategy(_strategy).withdraw(_diff);updateBalance(_vault, _strategy);_balance = IStrategy(_strategy).balanceOf();_vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff);address _want = IStrategy(_strategy).want();_balance = IERC20(_want).balanceOf(address(this));if (_convert != address(0)) {IConverter _converter = IConverter(_vaultDetails[_vault].converter);IERC20(_want).safeTransfer(address(_converter), _balance);_balance = _converter.convert(_want, _convert, _balance, 1);IERC20(_convert).safeTransfer(_vault, _balance);} else {IERC20(_want).safeTransfer(_vault, _balance);}}}function setConverter(address _vault,address _converter)externalnotHaltedonlyStrategist{require(manager.allowedConverters(_converter), "!allowedConverters");_vaultDetails[_vault].converter = _converter;}function setInvestEnabled(bool _investEnabled)externalnotHaltedonlyStrategist{globalInvestEnabled = _investEnabled;}function setMaxStrategies(uint256 _maxStrategies)externalnotHaltedonlyStrategist{maxStrategies = _maxStrategies;}function skim(address _strategy)externalonlyStrategistonlyStrategy(_strategy){address _want = IStrategy(_strategy).want();IStrategy(_strategy).skim();IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));}function withdrawAll(address _strategy,address _convert)externaloverrideonlyStrategistonlyStrategy(_strategy){address _want = IStrategy(_strategy).want();IStrategy(_strategy).withdrawAll();uint256 _amount = IERC20(_want).balanceOf(address(this));address _vault = _vaultStrategies[_strategy];updateBalance(_vault, _strategy);if (_convert != address(0)) {IConverter _converter = IConverter(_vaultDetails[_vault].converter);IERC20(_want).safeTransfer(address(_converter), _amount);_amount = _converter.convert(_want, _convert, _amount, 1);IERC20(_convert).safeTransfer(_vault, _amount);} else {IERC20(_want).safeTransfer(_vault, _amount);}uint256 _balance = _vaultDetails[_vault].balance;if (_balance >= _amount) {_vaultDetails[_vault].balance = _balance.sub(_amount);} else {_vaultDetails[_vault].balance = 0;}}function harvestStrategy(address _strategy,uint256 _estimatedWETH,uint256 _estimatedYAXIS)externaloverridenotHaltedonlyHarvesteronlyStrategy(_strategy){uint256 _before = IStrategy(_strategy).balanceOf();IStrategy(_strategy).harvest(_estimatedWETH, _estimatedYAXIS);uint256 _after = IStrategy(_strategy).balanceOf();address _vault = _vaultStrategies[_strategy];_vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));_vaultDetails[_vault].balances[_strategy] = _after;emit Harvest(_strategy);}function earn(address _strategy,address _token,uint256 _amount)externaloverridenotHaltedonlyStrategy(_strategy)onlyVault(_token){address _want = IStrategy(_strategy).want();if (_want != _token) {IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);IERC20(_token).safeTransfer(address(_converter), _amount);_amount = _converter.convert(_token, _want, _amount, 1);IERC20(_want).safeTransfer(_strategy, _amount);} else {IERC20(_token).safeTransfer(_strategy, _amount);}_vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);IStrategy(_strategy).deposit();updateBalance(msg.sender, _strategy);}function withdraw(address _token,uint256 _amount)externaloverrideonlyVault(_token){(address[] memory _strategies,uint256[] memory _amounts) = getBestStrategyWithdraw(_token, _amount);for (uint i = 0; i < _strategies.length; i++) {if (_strategies[i] == address(0)) {break;}IStrategy(_strategies[i]).withdraw(_amounts[i]);updateBalance(msg.sender, _strategies[i]);address _want = IStrategy(_strategies[i]).want();if (_want != _token) {address _converter = _vaultDetails[msg.sender].converter;IERC20(_want).safeTransfer(_converter, _amounts[i]);IConverter(_converter).convert(_want, _token, _amounts[i], 1);}}_amount = IERC20(_token).balanceOf(address(this));_vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);IERC20(_token).safeTransfer(msg.sender, _amount);}function balanceOf()externalviewoverridereturns (uint256 _balance){return _vaultDetails[msg.sender].balance;}function converter(address _vault)externalviewoverridereturns (address){return _vaultDetails[_vault].converter;}function getCap(address _vault,address _strategy)externalviewreturns (uint256){return _vaultDetails[_vault].caps[_strategy];}function investEnabled()externalviewoverridereturns (bool){if (globalInvestEnabled) {return _vaultDetails[msg.sender].strategies.length > 0;}return false;}function strategies(address _vault)externalviewreturns (address[] memory){return _vaultDetails[_vault].strategies;}function strategies()externalviewoverridereturns (uint256){return _vaultDetails[msg.sender].strategies.length;}function getBestStrategyWithdraw(address _token,uint256 _amount)internalviewreturns (address[] memory _strategies,uint256[] memory _amounts){address _vault = manager.vaults(_token);uint256 k = _vaultDetails[_vault].strategies.length;_strategies = new address[](k);_amounts = new uint256[](k);address _strategy;uint256 _balance;for (uint i = 0; i < k; i++) {_strategy = _vaultDetails[_vault].strategies[i];_strategies[i] = _strategy;_balance = _vaultDetails[_vault].balances[_strategy];if (_balance < _amount) {_amounts[i] = _balance;_amount = _amount.sub(_balance);} else {_amounts[i] = _amount;break;}}}function updateBalance(address _vault,address _strategy)internal{_vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();}modifier notHalted() {require(!manager.halted(), "halted");_;}modifier onlyGovernance() {require(msg.sender == manager.governance(), "!governance");_;}modifier onlyStrategist() {require(msg.sender == manager.strategist(), "!strategist");_;}modifier onlyStrategy(address _strategy) {require(manager.allowedStrategies(_strategy), "!allowedStrategy");_;}modifier onlyHarvester() {require(msg.sender == manager.harvester(), "!harvester");_;}modifier onlyVault(address _token) {require(msg.sender == manager.vaults(_token), "!vault");_;}}