pragma solidity ^0.6.12; contract WrappedIbbtcEth is Initializable, ERC20Upgradeable {address public governance;address public pendingGovernance;ERC20Upgradeable public ibbtc;ICore public core;uint256 public pricePerShare;uint256 public lastPricePerShareUpdate;event SetCore(address core);event SetPricePerShare(uint256 pricePerShare, uint256 updateTimestamp);event SetPendingGovernance(address pendingGovernance);event AcceptPendingGovernance(address pendingGovernance);modifier onlyPendingGovernance() {require(msg.sender == pendingGovernance, "onlyPendingGovernance");_;}modifier onlyGovernance() {require(msg.sender == governance, "onlyGovernance");_;}function initialize(address _governance, address _ibbtc, address _core) public initializer {__ERC20_init("Wrapped Interest-Bearing Bitcoin", "wibBTC");governance = _governance;core = ICore(_core);ibbtc = ERC20Upgradeable(_ibbtc);updatePricePerShare();emit SetCore(_core);}function setPendingGovernance(address _pendingGovernance) external onlyGovernance {pendingGovernance = _pendingGovernance;emit SetPendingGovernance(pendingGovernance);}function setCore(address _core) external onlyGovernance {core = ICore(_core);emit SetCore(_core);}function acceptPendingGovernance() external onlyPendingGovernance {governance = pendingGovernance;emit AcceptPendingGovernance(pendingGovernance);}function updatePricePerShare() public virtual returns (uint256) {pricePerShare = core.pricePerShare();lastPricePerShareUpdate = now;emit SetPricePerShare(pricePerShare, lastPricePerShareUpdate);}function mint(uint256 _shares) external {require(ibbtc.transferFrom(_msgSender(), address(this), _shares));_mint(_msgSender(), _shares);}function burn(uint256 _shares) external {_burn(_msgSender(), _shares);require(ibbtc.transfer(_msgSender(), _shares));}function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {uint256 amountInShares = balanceToShares(amount);_transfer(sender, recipient, amountInShares);_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amountInShares, "ERC20: transfer amount exceeds allowance"));return true;}function transfer(address recipient, uint256 amount) public virtual override returns (bool) {uint256 amountInShares = balanceToShares(amount);_transfer(_msgSender(), recipient, amountInShares);return true;}function sharesOf(address account) public view returns (uint256) {return _balances[account];}function balanceOf(address account) public view override returns (uint256) {return sharesOf(account).mul(pricePerShare).div(1e18);}function totalShares() public view returns (uint256) {return _totalSupply;}function totalSupply() public view override returns (uint256) {return totalShares().mul(pricePerShare).div(1e18);}function balanceToShares(uint256 balance) public view returns (uint256) {return balance.mul(1e18).div(pricePerShare);}function sharesToBalance(uint256 shares) public view returns (uint256) {return shares.mul(pricePerShare).div(1e18);}}