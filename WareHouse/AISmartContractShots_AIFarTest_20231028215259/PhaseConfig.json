{
    "ContractAnalysis": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "We excel in generating innovative approaches and enhancements for Solidity smart contract code.",
            "Here's a Solidity contract provided by the user: \"{task}\".",
            "As the {assistant_role}, our primary objective is to brainstorm potential improvements or related ideas for this specific contract code. Engage with me in a focused discussion to ensure we deliver the most impactful suggestion to the user.",
            "Note that our conversation should be centered exclusively on the provided Solidity contract code. Once we've collectively refined our suggestions and achieved unanimous agreement, the discussion should be concluded by any participant with a response starting with <INFO>, followed directly by the final idea or enhancement suggestion, e.g. \"<INFO> Implementing a multi-sig wallet mechanism for added security in transactions\"."
        ]
    },
    "ArithmeticDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to conduct a comprehensive inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Integer Overflow OR Underflow. There are two cases, the contract may have Integer Overflow/Underflow vulnerabilities:",
            "1. When the result of an arithmetic operation exceeds the maximum or falls below the minimum value that can be stored in the data type being used in the contract code.", 
            "2. The contract does not include any checks for integer overflow/underflow when performing calculations involving tokens and prices.",
            "If you identify all Integer Overflow/Underflow vulnerabilities, responding with: \"<INFO> Integer Overflow/Underflow Identified .\" ", 
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code.",
            "'''",
            "```",
            "If you don't find any vulnerabilities, responding only with: \"<INFO> No Integer Overflow/Underflow.\""          
        ]
    },
    "ReentrancyDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to conduct a comprehensive inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Reentrancy attacks. Reentrancy attacks occurs when an attacker can create a malicious contract that calls some function repeatedly before the balance is updated, allowing them to drain the contract's funds. It does not follow the checks-effects-interactions pattern",
            "If you identify Reentrancy vulnerability, please respond with: \"<INFO> Reentrancy Identified.\"", 
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> No Reentrancy.\""   
        ]
    },
    "UncheckedSendDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Unchecked External Calls. There are two cases, the contract may have Unchecked External Calls:",
            "1. When external calls are not adequately checked, the calling contract may execute code in the external contract without checking the external contract's behavior is as expected.",
            "2. When the external contract's code is not trusted or its behavior is unpredictable, it can compromise the overall security and stability of the calling contract.",
            "If you identify Unchecked External Calls, please respond with: \"<INFO> Unchecked External Calls Identified.\".",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Unchecked External Calls.\"" 
        ]
    },
    "DelegatecallDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to conduct a comprehensive inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Delegatecall Misuse. There are three cases, the contract may have Delegatecall Misuse vulnerabilities:",
            "1. When the contract uses `delegatecall` to delegate the execution of a function to another contract,an attacker can manipulate the state of the contract by executing malicious code of another contract.",
            "2. when a contract uses `delegatecall` to execute code from another contract, the executing contract shares the same storage context as the calling contract. ",
            "3. When using `delegatecall`, uninitialized storage variables in the calling contract can be overwritten by the called contract, leading to unexpected and potentially insecure behavior.",
            "If you identify Delegatecall Misuse, please respond with: \"<INFO> Delegatecall Misuse Identified.\".", 
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Delegatecall Misuse.\"" 
        ]
    },
    "TODDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Transactions Order Dependence. This vulnerability occurs when a contract's behavior depends on the order of transactions, which can lead to unintended outcomes and provide attackers with opportunities to exploit transaction sequencing.",
            "Please conduct a thorough analysis and provide the following information:",
            "1. Review the contract's code logic to identify any potential areas where the order of transaction execution might have an impact on the contract's behavior.",
            "2. Examine critical functions, particularly those involving fund transfers or resource allocation, to ensure they are not susceptible to Transactions Order Dependence.",
            "3. Investigate scenarios in which gas prices can be manipulated to change the order of transaction execution.",
            "If you identify Transactions Order Dependence, respond with: \"<INFO> Transactions Order Dependence Identified.\"",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Transactions Order Dependence.\""     
        ]
    },
    "TimeManiDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Timestamp Dependence. This vulnerability arises when smart contract relies on the timestamp information. Miners have some discretion over the timestamps of the blocks they mine, potentially manipulating them to their advantage and affecting the behavior of contracts that depend on them. Besides, the misuse of \"now\" timestamp should also be considered.",
            "If you identify Timestamp Dependence, respond with: \"<INFO> Timestamp Dependence.\"",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Timestamp Dependence.\""     
        ]
    },
    "BadRandDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Reliance on blockhash for randomness. This Reliance on blockhash for randomness vulnerability pertains to the flawed generation of random numbers within smart contracts. Random numbers often influence the decisions or outcomes of contract functionalities. If the process of random number generation is compromised, adversaries may predict the contract outcome, leading to potential exploitation.",
            "If you identify Reliance on blockhash for randomness, respond with: \"<INFO> Bad Randomness Identified.\"",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Bad Randomness.\""  
        ]
    },
    "TXRelianceDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Reliance on `tx.origin`. This vulnerability arises when the contract relies on `tx.origin` to verify the owner of the contract. However, `tx.origin` represents the original sender of the transaction, which can be different from the immediate caller in the case of contract-to-contract interactions. This reliance on `tx.origin` can lead to potential security risks.",
            "If you identify Reliance on `tx.origin`, respond with: \"<INFO> Unsafe `tx.origin` Identified.\"",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Unsafe `tx.origin`.\""  
        ]
    },
    "SuicideDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Lack of Restriction on `selfdestruct`. This vulnerability occurs when a function in contract allow anyone to call them and self-destruct the contract, which can lead to the loss of all funds and the inability to recover the contract.",
            "If you identify Lack of Restriction on `selfdestruct`, respond with: \"<INFO> Suicide Identified.\"",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Suicide.\""  
        ]
    },
    "GasLimitDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, , with a particular focus on identifying vulnerabilities related to Lack of Gas Limit Considerations. The vulnerability arises when the contract does not consider the gas limit when executing certain functions. The contract does not consider the gas limit when executing a function, and the function performs a while loop that can potentially iterate a large number of times, leading to out-of-gas errors and failed transactions.",
            "If you identify Lack of Gas Limit Considerations, respond with: \"<INFO> Lack of Gas Limit Considerations.\"",
            "For each vulnerability identified, use the following format:",
            "```",
            "VULNERABILITY NAME or TYPE",
            "'''",
            "DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code",
            "'''",
            "```",
            "If you don't find any vulnerabilities, respond only with: \"<INFO> NO Lack of Gas Limit Considerations.\"" 
        ]
    },
    "BugsSummary": {
        "assistant_role_name": "Solidity Programming Expert",
        "user_role_name": "Security Analyst",
        "phase_prompt": [
            "Below are the details of our smart contract codes and their corresponding analysis reports:",
            "Task: \"{task}\".",
            "As per the provided analysis reports, please extract and succinctly summarize all the security vulnerabilities identified within the contract codes. The goal is to have a consolidated and clear overview of all security issues present. Conclude the summary with a comprehensive analysis report."
        ]
    },
    "TestBugsSummary": {
        "assistant_role_name": "Security Testing Engineer",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Below are the details of our target smart contract codes and their associated test reports:",
            "Task: \"{task}\".",
            "Existing Test Reports:",
            "\"{test_reports}\"",
            "Based on the given test reports, please identify and succinctly summarize all bugs causing issues within the contract codes. The objective is to obtain a clear and consolidated overview of all identified bugs. Conclude with a comprehensive test report summarizing the findings."
        ]
    },
    "ContractModification": {
        "assistant_role_name": "Security Testing Engineer",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Our traget contract codes and corresponding test reports are listed below: ",
            "Task: \"{task}\".",
            "Test Reports for the Source Codes:",
            "\"{test_reports}\"",
            "Summary of Errors from the Test Reports:",
            "\"{error_summary}\"",
            "Please note that when presenting the modified contract code, adhere to the specific markdown code block format. The format is as follows:",
            "```",
            "CODE",
            "```",
            "As the {assistant_role}, your primary task is to ensure the safe and robust execution of the contract. Based on the provided error summary, make the necessary modifications to the contract codes. Provide the fixed contract codes strictly following the above format. If all issues are addressed, conclude with: \"<INFO> Finished\"."
        ]
    }
}