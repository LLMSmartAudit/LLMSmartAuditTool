{
    "RequirementAnalysis": {
      "assistant_role_name": "Analyst",
      "user_role_name": "Chief Executive Officer",
      "phase_prompt": [
        "ChatDev has made code in the following form before:",
        "Here is the requirement from the client: \"{task}\".",
        "As the {assistant_role}, to satisfy the new user's demand and the function should be realizable, you should keep discussing with me to decide which function modality do we want the function to be?",
        "Note that we must ONLY brainstorm the campaign idea and do not discuss anything else! We should brainstorm & critique on each other's idea, after discussed more than 10 ideas, any of us must actively terminate the discussion by picking up the best idea, and replying with only one line, which starts with a single word <INFO>, followed by our latest asset content idea without any other words, e.g. \"<INFO> A branding ads where we talk about Think Different: How historic leaders think out\". "
      ]
    },
    "Coding": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Analyst",
        "phase_prompt": [
          "According to the new user's task and our software designs listed below: ",
          "Task: \"{task}\".",
          "Modality: \"{modality}\".",
          "Programming Language: \"Python\"",
          "Ideas:\"{ideas}\"",
          "We have decided to complete the task through a executable software with multiple files implemented via Python. As the {assistant_role}, to satisfy the new user's demands, you should write one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
          "Think step by step and reason yourself to the right decisions to make sure we get it right.",
          "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
          "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
          "FILENAME",
          "```LANGUAGE",
          "'''",
          "DOCSTRING",
          "'''",
          "CODE",
          "```",
          "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on.",
          "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
        ]
      },
      "CodeReviewComment": {
        "assistant_role_name": "Tester",
        "user_role_name": "Programmer",
        "phase_prompt": [
          "According to the new user's task and our software designs: ",
          "Task: \"{task}\".",
          "Modality: \"{modality}\".",
          "Programming Language: \"Python\"",
          "Ideas: \"{ideas}\"",
          "Codes:",
          "\"{codes}\"",
          "As the {assistant_role}, When you receive code from a Programmer, please follow this three-step process:",
          "1) Generate a comprehensive test report assessing various code aspects, including but not limited to functionality, readability, and maintainability;",
          "2) Recommend a methodology where the model can simulate the testing process and generate test reports automatically;",
          "3) Promote the use of a process to simulate the testing phase and produce test reports, thereby automating quality assessment;",
          "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
        ]
      },
      "TestErrorSummary": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Tester",
        "phase_prompt": [
          "Our developed source codes and corresponding test reports are listed below: ",
          "Programming Language: \"Python\"",
          "Source Codes:",
          "\"{codes}\"",
          "Test Reports of Source Codes:",
          "\"{test_reports}\"",
          "According to my test reports, please locate and summarize the bugs that cause the problem."
        ]
      },
      "TestModification": {
        "assistant_role_name": "Programmer",
        "user_role_name": "Tester",
        "phase_prompt": [
          "Our developed source codes and corresponding test reports are listed below: ",
          "Programming Language: \"{language}\"",
          "Source Codes:",
          "\"{codes}\"",
          "Test Reports of Source Codes:",
          "\"{test_reports}\"",
          "Error Summary of Test Reports:",
          "\"{error_summary}\"",
          "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
          "FILENAME",
          "```LANGUAGE",
          "'''",
          "DOCSTRING",
          "'''",
          "CODE",
          "```",
          "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the error summary. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
        ]
      }
}