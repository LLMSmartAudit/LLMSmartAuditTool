pragma solidity ^0.8.0;contract AccessControl {struct RoleData {mapping (address => bool) members;bytes4 adminRole;}mapping (bytes4 => RoleData) private _roles;bytes4 public constant ROOT = 0x00000000;bytes4 public constant LOCK = 0xFFFFFFFF;event RoleAdminChanged(bytes4 indexed role, bytes4 indexed newAdminRole);event RoleGranted(bytes4 indexed role, address indexed account, address indexed sender);event RoleRevoked(bytes4 indexed role, address indexed account, address indexed sender);constructor () {_grantRole(ROOT, msg.sender);_setRoleAdmin(LOCK, LOCK);}modifier auth() {require (_hasRole(msg.sig, msg.sender), "Access denied");_;}modifier admin(bytes4 role) {require (_hasRole(_getRoleAdmin(role), msg.sender), "Only admin");_;}function hasRole(bytes4 role, address account) external view returns (bool) {return _hasRole(role, account);}function getRoleAdmin(bytes4 role) external view returns (bytes4) {return _getRoleAdmin(role);}function setRoleAdmin(bytes4 role, bytes4 adminRole) external virtual admin(role) {_setRoleAdmin(role, adminRole);}function grantRole(bytes4 role, address account) external virtual admin(role) {_grantRole(role, account);}function grantRoles(bytes4[] memory roles, address account) external virtual {for (uint256 i = 0; i < roles.length; i++) {require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), "Only admin");_grantRole(roles[i], account);}}function lockRole(bytes4 role) external virtual admin(role) {_setRoleAdmin(role, LOCK);}function revokeRole(bytes4 role, address account) external virtual admin(role) {_revokeRole(role, account);}function revokeRoles(bytes4[] memory roles, address account) external virtual {for (uint256 i = 0; i < roles.length; i++) {require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), "Only admin");_revokeRole(roles[i], account);}}function renounceRole(bytes4 role, address account) external virtual {require(account == msg.sender, "Renounce only for self");_revokeRole(role, account);}function _hasRole(bytes4 role, address account) internal view returns (bool) {return _roles[role].members[account];}function _getRoleAdmin(bytes4 role) internal view returns (bytes4) {return _roles[role].adminRole;}function _setRoleAdmin(bytes4 role, bytes4 adminRole) internal virtual {if (_getRoleAdmin(role) != adminRole) {_roles[role].adminRole = adminRole;emit RoleAdminChanged(role, adminRole);}}function _grantRole(bytes4 role, address account) internal {if (!_hasRole(role, account)) {_roles[role].members[account] = true;emit RoleGranted(role, account, msg.sender);}}function _revokeRole(bytes4 role, address account) internal {if (_hasRole(role, account)) {_roles[role].members[account] = false;emit RoleRevoked(role, account, msg.sender);}}}