Task:
pragma solidity ^0.4.19;contract MONEY_BOX{struct Holder{uint unlockTime;uint balance;}mapping (address => Holder) public Acc;uint public MinSum;Log LogFile;bool intitalized;function SetMinSum(uint _val)public{if(intitalized)throw;MinSum = _val;}function SetLogFile(address _log)public{if(intitalized)throw;LogFile = Log(_log);}function Initialized()public{intitalized = true;}function Put(uint _lockTime)publicpayable{var acc = Acc[msg.sender];acc.balance += msg.value;if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;LogFile.AddMessage(msg.sender,msg.value,Put);}function Collect(uint _am)publicpayable{var acc = Acc[msg.sender];if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime){if(msg.sender.call.value(_am)()){acc.balance-=_am;LogFile.AddMessage(msg.sender,_am,Collect);}}}function()publicpayable{Put(0);}}contract Log{struct Message{address Sender;string Data;uint Val;uint Time;}Message[] public History;Message LastMsg;function AddMessage(address _adr,uint _val,string _data)public{LastMsg.Sender = _adr;LastMsg.Time = now;LastMsg.Val = _val;LastMsg.Data = _data;History.push(LastMsg);}}

Config:
ChatEnvConfig.clear_structure: True
ChatEnvConfig.git_management: False
ChatEnvConfig.gui_design: True


Roster:
Chief Executive Officer, Counselor, Security Analyst, Solidity Programming Expert, Security Testing Engineer

Modality:


Ideas:
 Implementing an access control mechanism using a modifier to restrict the `Put` and `Collect` functions to authorized users is a great idea. This will enhance the security of the contract by preventing unauthorized access and potential misuse of the functions. By implementing this access control mechanism, we can ensure that only designated users can deposit funds and collect them when the conditions are met. This will provide better control and protection for the funds stored in the contract.

Language:


Code_Version:
0.0

Proposed_images:
0

Incorporated_images:
0

