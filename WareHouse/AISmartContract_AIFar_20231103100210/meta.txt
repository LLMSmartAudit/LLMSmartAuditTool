Task:
#pragma solidity ^0.4.21;contract TokenSaleChallenge {mapping(address => uint256) public balanceOf;uint256 constant PRICE_PER_TOKEN = 1 ether;function TokenSaleChallenge(address _player) public payable {require(msg.value == 1 ether);}function isComplete() public view returns (bool) {return address(this).balance < 1 ether;}function buy(uint256 numTokens) public payable {require(msg.value == numTokens * PRICE_PER_TOKEN);balanceOf[msg.sender] += numTokens;}function sell(uint256 numTokens) public {require(balanceOf[msg.sender] >= numTokens);balanceOf[msg.sender] -= numTokens;msg.sender.transfer(numTokens * PRICE_PER_TOKEN);}}#

Config:
ChatEnvConfig.clear_structure: True
ChatEnvConfig.git_management: False
ChatEnvConfig.gui_design: True


Roster:
Chief Executive Officer, Counselor, Security Analyst, Solidity Programming Expert, Security Testing Engineer

Modality:


Ideas:
 A smart contract where users can buy and sell tokens. The contract keeps track of the balance of each address and sets a price for each token. There is a function to check if the contract is complete, and functions to buy and sell tokens.

Language:


Code_Version:
0.0

Proposed_images:
0

Incorporated_images:
0

