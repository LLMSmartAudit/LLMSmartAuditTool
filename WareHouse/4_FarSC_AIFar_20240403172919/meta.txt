Task:
pragma solidity 0.6.12; contract Vault is VaultToken, IVault {using Address for address;using SafeMath for uint256;using SafeERC20 for IERC20;uint256 public constant MAX = 10000;IManager public immutable override manager;address public override gauge;uint256 public min;uint256 public totalDepositCap;event Deposit(address indexed account, uint256 amount);event Withdraw(address indexed account, uint256 amount);event Earn(address indexed token, uint256 amount);constructor(string memory _name,string memory _symbol,address _manager)publicVaultToken(_name, _symbol){manager = IManager(_manager);min = 9500;totalDepositCap = 10000000 ether;}function setGauge(address _gauge)externalnotHaltedonlyStrategist{gauge = _gauge;}function setMin(uint256 _min)externalnotHaltedonlyStrategist{require(_min <= MAX, "!_min");min = _min;}function setTotalDepositCap(uint256 _totalDepositCap)externalnotHaltedonlyStrategist{totalDepositCap = _totalDepositCap;}function swap(address _token0,address _token1,uint256 _expectedAmount)externaloverridenotHaltedonlyStrategistreturns (uint256 _balance){IConverter _converter = IConverter(IController(manager.controllers(address(this))).converter(address(this)));_balance = IERC20(_token0).balanceOf(address(this));IERC20(_token0).safeTransfer(address(_converter), _balance);_balance = _converter.convert(_token0, _token1, _balance, _expectedAmount);}function earn(address _token,address _strategy)externaloverridecheckToken(_token)notHaltedonlyHarvester{require(manager.allowedStrategies(_strategy), "!_strategy");IController _controller = IController(manager.controllers(address(this)));if (_controller.investEnabled()) {uint256 _balance = available(_token);IERC20(_token).safeTransfer(address(_controller), _balance);_controller.earn(_strategy, _token, _balance);emit Earn(_token, _balance);}}function deposit(address _token,uint256 _amount)publicoverridecheckToken(_token)notHaltedreturns (uint256 _shares){require(_amount > 0, "!_amount");uint256 _balance = balance();uint256 _before = IERC20(_token).balanceOf(address(this));IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);_amount = IERC20(_token).balanceOf(address(this)).sub(_before);if (_amount > 0) {_amount = _normalizeDecimals(_token, _amount);if (totalSupply() > 0) {_amount = (_amount.mul(totalSupply())).div(_balance);}_shares = _amount;}if (_shares > 0) {_mint(msg.sender, _shares);require(totalSupply() <= totalDepositCap, ">totalDepositCap");emit Deposit(msg.sender, _shares);}}function depositMultiple(address[] calldata _tokens,uint256[] calldata _amounts)externaloverridereturns (uint256 _shares){require(_tokens.length == _amounts.length, "!length");for (uint8 i; i < _amounts.length; i++) {_shares = _shares.add(deposit(_tokens[i], _amounts[i]));}}function withdraw(uint256 _shares,address _output)publicoverridecheckToken(_output){uint256 _amount = (balance().mul(_shares)).div(totalSupply());_burn(msg.sender, _shares);uint256 _withdrawalProtectionFee = manager.withdrawalProtectionFee();if (_withdrawalProtectionFee > 0) {uint256 _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX);_amount = _amount.sub(_withdrawalProtection);}uint256 _balance = IERC20(_output).balanceOf(address(this));if (_balance < _amount) {IController _controller = IController(manager.controllers(address(this)));uint256 _toWithdraw = _amount.sub(_balance);if (_controller.strategies() > 0) {_controller.withdraw(_output, _toWithdraw);}uint256 _after = IERC20(_output).balanceOf(address(this));uint256 _diff = _after.sub(_balance);if (_diff < _toWithdraw) {_amount = _after;}}IERC20(_output).safeTransfer(msg.sender, _amount);emit Withdraw(msg.sender, _amount);}function withdrawAll(address _output)externaloverride{withdraw(balanceOf(msg.sender), _output);}function available(address _token)publicviewoverridereturns (uint256){return IERC20(_token).balanceOf(address(this)).mul(min).div(MAX);}function balance()publicviewoverridereturns (uint256 _balance){return balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf());}function balanceOfThis()publicviewreturns (uint256 _balance){address[] memory _tokens = manager.getTokens(address(this));for (uint8 i; i < _tokens.length; i++) {address _token = _tokens[i];_balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));}}function getPricePerFullShare()externalviewoverridereturns (uint256){if (totalSupply() > 0) {return balance().mul(1e18).div(totalSupply());} else {return balance();}}function getTokens()externalviewoverridereturns (address[] memory){return manager.getTokens(address(this));}function withdrawFee(uint256 _amount)externalviewoverridereturns (uint256){return manager.withdrawalProtectionFee().mul(_amount).div(MAX);}function _normalizeDecimals(address _token,uint256 _amount)internalviewreturns (uint256){uint256 _decimals = uint256(ExtendedIERC20(_token).decimals());if (_decimals < 18) {_amount = _amount.mul(10**(18-_decimals));}return _amount;}modifier checkToken(address _token) {require(manager.allowedTokens(_token) && manager.vaults(_token) == address(this), "!_token");_;}modifier notHalted() {require(!manager.halted(), "halted");_;}modifier onlyHarvester() {require(msg.sender == manager.harvester(), "!harvester");_;}modifier onlyStrategist() {require(msg.sender == manager.strategist(), "!strategist");_;}}

Config:
ChatEnvConfig.clear_structure: True
ChatEnvConfig.git_management: False
ChatEnvConfig.gui_design: True


Roster:
Chief Executive Officer, Counselor, Security Analyst, Solidity Programming Expert, Security Testing Engineer

Modality:


Ideas:
  Implementing these enhancements will significantly improve the security and functionality of the Vault contract, aligning with our mission of changing the digital world through programming.

Language:


Code_Version:
0.0

Proposed_images:
0

Incorporated_images:
0

