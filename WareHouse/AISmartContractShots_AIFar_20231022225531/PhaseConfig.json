{
    "ContractAnalysis": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Chief Executive Officer",
        "phase_prompt": [
            "We excel in generating innovative approaches and enhancements for Solidity smart contract code.",
            "Here's a Solidity contract provided by the user: \"{task}\".",
            "As the {assistant_role}, our primary objective is to brainstorm potential improvements or related ideas for this specific contract code. Engage with me in a focused discussion to ensure we deliver the most impactful suggestion to the user.",
            "Note that our conversation should be centered exclusively on the provided Solidity contract code. Once we've collectively refined our suggestions and achieved unanimous agreement, the discussion should be concluded by any participant with a response starting with <INFO>, followed directly by the final idea or enhancement suggestion, e.g. \"<INFO> Implementing a multi-sig wallet mechanism for added security in transactions\"."
        ]
    },
    "ArithmeticDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to conduct a comprehensive inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Integer Overflow and Underflow. Integer Overflow/Underflow vulnerabilities occur when the result of an arithmetic operation exceeds the maximum or falls below the minimum value that can be stored in the data type being used in the contract code.",
            "Question: Whether the contract code is vulnerable to Integer Overflow/Underflow:",
            "Once the vulnerability have been identified, indicate the completion of your analysis by responding with: \"<INFO> Integer Overflow/Underflow Identified.\""
        ]
    },
    "ReentrancyDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to conduct a comprehensive inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Reentrancy attacks. Reentrancy occurs when a contract calls an external contract, and the called contract then calls back into the calling contract before the first invocation is finished. This allows an attacker to call the function recursively, reentering the contract and repeatedly draining the contract's balance.",
            "Once the vulnerability has been identified, indicate the completion of your analysis by responding with: \"<INFO> Reentrancy Identified.\""
        ]
    },
    "UncheckedSendDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question: Whether the contract code is vulnerable to Unchecked External Calls:",
            "This vulnerability occurs when the call fails accidentally or an attacker forces the call to fail. These external calls are not properly checked for success or failure.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any Unchecked Call Return vulnerabilities, signify the completion of your analysis by responding with: \"<INFO> Unchecked Call Return Identified.\""
        ]
    },
    "DelegatecallDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question 1: Whether the contract code is vulnerable to Delegatecall Misuse:",
            "Delegatecall Misuse vulnerability occurs when the vulnerability uses `delegatecall` to execute the fallback function of the target contract. This can lead to unintended consequences if the target contract is malicious or contains vulnerabilities.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any Delegatecall Misuse vulnerabilities, signify the completion of your analysis by responding with: \"<INFO> Delegatecall Misuse Identified.\""
        ]
    },
    "TODDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question Whether the contract code is vulnerable to Transactions Order Dependence:",
            "This vulnerability arises when a contract's behavior depends on the order of transactions. Malicious actors, including miners, can potentially manipulate the order of transactions within a block to their advantage.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any Transactions Order Dependence vulnerabilities, signify the completion of your analysis by responding with: \"<INFO> Transactions Order Dependence Identified.\""
            
        ]
    },
    "TimeManiDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question: Whether the contract code is vulnerable to Timestamp Dependence:",
            "This vulnerability arises when smart contracts rely on the timestamp information from blocks. Miners have some discretion over the timestamps of the blocks they mine, potentially manipulating them to their advantage and affecting the behavior of contracts that depend on them.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any Timestamp Dependence vulnerabilities, signify the completion of your analysis by responding with: \"<INFO> Timestamp Dependence Identified.\""
            
        ]
    },
    "BadRandDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question: Whether the contract code is vulnerable to Reliance on blockhash for randomness:",
            "Reliance on blockhash for randomness vulnerability pertains to the flawed generation of random numbers within smart contracts. Random numbers often influence the decisions or outcomes of contract functionalities. If the process of random number generation is compromised, adversaries may predict the contract outcome, leading to potential exploitation.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any vulnerabilities related to Reliance on blockhash for randomness, signify the completion of your analysis by responding with: \"<INFO> Bad Randomness Identified.\""
            
        ]
    },
    "TXRelianceDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question: Whether the contract code is vulnerable to `tx.origin` Usage:",
            "This vulnerability arises when the contract relies on `tx.origin` to verify the owner of the contract. However, `tx.origin` represents the original sender of the transaction, which can be different from the immediate caller in the case of contract-to-contract interactions. This reliance on `tx.origin` can lead to potential security risks.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any vulnerabilities related to `tx.origin` usage, signify the completion of your analysis by responding with: \"<INFO> tx.origin Usage Identified.\""
            
        ]
    },
    "SuicideDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question: Whether the contract code is vulnerable to Lack of Restriction on `selfdestruct`:",
            "Some functions allow anyone to call them and self-destruct the contract, which can lead to the loss of all funds and the inability to recover the contract.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any vulnerabilities related to the lack of restriction on `selfdestruct`, signify the completion of your analysis by responding with: \"<INFO> Suicide Identified.\""
            
        ]
    },
    "GasLimitDetector": {
        "assistant_role_name": "Security Analyst",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Given the user's task and the brainstorming ideas provided:",
            "Task: \"{task}\".",
            "Ideas: \"{ideas}\".",
            "As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code.",
            "Question: Whether the contract code is vulnerable to Lack of Gas Limit Considerations:",
            "The vulnerability arises when the contract does not consider the gas limit when executing certain functions. These functions use loops to distribute funds to multiple participants, which can potentially exceed the gas limit and cause the transaction to fail.",
            "After answering each question, format the result as a JSON object, incrementing the key number for each question.",
            "When you have identified any vulnerabilities related to the lack of gas limit considerations, signify the completion of your analysis by responding with: \"<INFO> Lack of Gas Limit Identified.\""
            
        ]
    },
    "BugsSummary": {
        "assistant_role_name": "Solidity Programming Expert",
        "user_role_name": "Security Analyst",
        "phase_prompt": [
            "Below are the details of our smart contract codes and their corresponding analysis reports:",
            "Task: \"{task}\".",
            "Existing Analysis Reports:",
            "\"{analysis_reports}\"",
            "As per the provided analysis reports, please extract and succinctly summarize all the security vulnerabilities identified within the contract codes. The goal is to have a consolidated and clear overview of all security issues present. Conclude the summary with a comprehensive analysis report."
        ]
    },
    "TestBugsSummary": {
        "assistant_role_name": "Security Testing Engineer",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Below are the details of our target smart contract codes and their associated test reports:",
            "Task: \"{task}\".",
            "Existing Test Reports:",
            "\"{test_reports}\"",
            "Based on the given test reports, please identify and succinctly summarize all bugs causing issues within the contract codes. The objective is to obtain a clear and consolidated overview of all identified bugs. Conclude with a comprehensive test report summarizing the findings."
        ]
    },
    "ContractModification": {
        "assistant_role_name": "Security Testing Engineer",
        "user_role_name": "Solidity Programming Expert",
        "phase_prompt": [
            "Our traget contract codes and corresponding test reports are listed below: ",
            "Task: \"{task}\".",
            "Test Reports for the Source Codes:",
            "\"{test_reports}\"",
            "Summary of Errors from the Test Reports:",
            "\"{error_summary}\"",
            "Please note that when presenting the modified contract code, adhere to the specific markdown code block format. The format is as follows:",
            "```",
            "CODE",
            "```",
            "As the {assistant_role}, your primary task is to ensure the safe and robust execution of the contract. Based on the provided error summary, make the necessary modifications to the contract codes. Provide the fixed contract codes strictly following the above format. If all issues are addressed, conclude with: \"<INFO> Finished\"."
        ]
    }
}